include make_env

.PHONY: build push pull restart start stop login clean release tag

# Image and binary can be overidden with env vars.
DOCKER_IMAGE ?= workinghandguard/jenkins
# DOCKER_TAG ?= default
CONTAINER_NAME ?= jenkins

# Get the latest commit.
GIT_COMMIT = $(strip $(shell git rev-parse --short HEAD))

# Get the version number from the code
CODE_VERSION = $(strip $(shell cat VERSION))

# Find out if the working directory is clean
GIT_NOT_CLEAN_CHECK = $(shell git status --porcelain)

ifneq (x$(GIT_NOT_CLEAN_CHECK), x)
	DOCKER_TAG_SUFFIX = "-dirty"
endif

# If we're releasing to Docker Hub, and we're going to mark it with the latest tag, it should exactly match a version release
ifeq ($(MAKECMDGOALS),release)
	# Use the version number as the release tag.
	DOCKER_TAG = $(CODE_VERSION)

	ifndef CODE_VERSION
		$(error You need to create a VERSION file to build a release)
	endif

	# See what commit is tagged to match the version
	VERSION_COMMIT = $(strip $(shell git rev-list $(CODE_VERSION) -n 1 | cut -c1-7))
	ifneq ($(VERSION_COMMIT), $(GIT_COMMIT))
		$(error echo You are trying to push a build based on commit $(GIT_COMMIT) but the tagged release version is $(VERSION_COMMIT))
	endif

	# Don't push to Docker Hub if this isn't a clean repo
	ifneq (x$(GIT_NOT_CLEAN_CHECK), x)
		$(error echo You are trying to release a build based on a dirty repo)
	endif
else
	# Add the commit ref for development builds. Mark as dirty if the working directory isn't clean
	DOCKER_TAG = $(CODE_VERSION)-$(GIT_COMMIT)$(DOCKER_TAG_SUFFIX)
endif

default: build

# Build Docker image
build: docker_build output

# Build and push Docker image
release: docker_build docker_push output

push:
	$(info Make: Pushing "$(DOCKER_TAG)" tagged image.)
	@docker push $(DOCKER_IMAGE):$(DOCKER_TAG)

pull:
	$(info Make: Pulling "$(DOCKER_TAG)" tagged image.)
	@docker pull $(DOCKER_IMAGE):$(DOCKER_TAG)

restart:
	$(info Make: Restarting "$(DOCKER_TAG)" tagged container.)
	@make -s stop
	@make -s start

clean:
	@docker system prune --volumes --force

login:
	$(info Make: Login to Docker Hub.)
	@docker login -u $(DOCKER_USER) -p $(DOCKER_PASS)

tag:
	$(info Make: Tagging image with "$(DOCKER_TAG)".)
	@docker tag $(DOCKER_IMAGE):latest $(DOCKER_IMAGE):$(DOCKER_TAG)

start:
	$(info Make: Starting "$(DOCKER_TAG)" tagged container.)
	@docker run -dit --name $(CONTAINER_NAME) $(DOCKER_IMAGE):$(DOCKER_TAG) -v /var/run/docker.sock:/var/run/docker.sock --restart unless-stopped 

stop:
	$(info Make: Stopping "$(DOCKER_TAG)" tagged container.)
	@docker stop $(CONTAINER_NAME)
	@docker rm $(CONTAINER_NAME)

docker_build: Dockerfile
	# Build Docker image
	$(info Make: Building "$(DOCKER_TAG)" tagged images.)
	docker build \
	--build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
	--build-arg VERSION=$(CODE_VERSION) \
	--build-arg VCS_URL=`git config --get remote.origin.url` \
	--build-arg VCS_REF=$(GIT_COMMIT) \
	-t $(DOCKER_IMAGE):$(DOCKER_TAG) \
	-f Dockerfile .
	@make -s clean

docker_push:
	# Tag image as latest
	docker tag $(DOCKER_IMAGE):$(DOCKER_TAG) $(DOCKER_IMAGE):latest

	# Push to DockerHub
	@make -s push
	docker push $(DOCKER_IMAGE):latest

output:
	@echo Docker Image: $(DOCKER_IMAGE):$(DOCKER_TAG)